# Add any additional parameters to qsub command.
#
params = --time=30
# 
# For example if you want to get notification in e-mail when your job finishes,
# this line may look like: 
# params = -m e -M someuser@somedomain.com
# For the list of qsub parameters please refer to the Torque documentation.
# If Materials Studio is installed on a Linux cluster, the job may run on any node 
# belonging to the cluster. For all other Linux configurations, you must insure that the 
# job is executed on the same node where Materials Studio is installed.
#
# Hence, if your PBS Linux configuration allows starting jobs on a remote node and if this 
# is not a Linux cluster, you must add  -l nodes=<host>  to the params line and substitute 
# <host> by the actual name of the local host. This will prevent jobs from being submitted 
# to a different node. You can find out the local host name by executing command hostname.



#
#  If the gateway is installed on a Linux cluster.
#  it is worth putting correct number of cpu per node
#  the information can be obtained by running pbsnodes and examining parameters  np to find the most 
#  representative number, otherwise Gateway will try to guess it... The guess is correct if cluster is homogeneous
#
NumCPUSsperNode = 20
#



#
# The following line specifies the default queue. 
#

# default_queue=Mem128

# <queue name> should be substituted by the actual queue name.
# This queue will be shown first in the user interface on the client site.
# If there is a default queue in the queuing system you can omit this step.

#
# Job status reported is derived normally based on the reports from the job itself,
# but if the job was killed by some external tool e.g. kill signal or killed by the queuing system or just aborted unexpectedly 
# the gateway must  get the information via querying  the  queuing system about the actual job status
# As this command can potentially hang let's do it not very often
# Here is the minimum interval between checks (in seconds):
#
CheckJobStatusEvery=600


#
# command line to query status of the queuing system
#
#GetCurrentStatus=qstat -B
GetCurrentStatus=sinfo
#




